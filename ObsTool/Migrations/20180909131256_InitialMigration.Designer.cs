// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using ObsTool.Entities;
using ObsTool.Models;
using System;

namespace ObsTool.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20180909131256_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ObsTool.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<int>("Difficulty");

                    b.Property<int>("InterestRating");

                    b.Property<int>("Priority");

                    b.Property<int>("SearchField");

                    b.Property<int>("Season");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("ObsTool.Entities.ArticleConstellations", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<int>("ConstellationId");

                    b.HasKey("ArticleId", "ConstellationId");

                    b.HasIndex("ConstellationId");

                    b.ToTable("ArticleConstellations");
                });

            modelBuilder.Entity("ObsTool.Entities.ArticleDsoObjects", b =>
                {
                    b.Property<int>("ArticleId");

                    b.Property<int>("DsoId");

                    b.HasKey("ArticleId", "DsoId");

                    b.HasIndex("DsoId");

                    b.ToTable("ArticleDsoObjects");
                });

            modelBuilder.Entity("ObsTool.Entities.Constellation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Abbreviation");

                    b.Property<string>("Name");

                    b.Property<int>("Season");

                    b.HasKey("Id");

                    b.ToTable("Constellations");
                });

            modelBuilder.Entity("ObsTool.Entities.Dso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AllCommonNames")
                        .HasColumnName("All_common_names")
                        .HasMaxLength(500);

                    b.Property<string>("BCHM")
                        .HasMaxLength(50);

                    b.Property<string>("BRSTR")
                        .HasMaxLength(50);

                    b.Property<string>("Catalog")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("CatalogNumber")
                        .HasColumnName("Catalog_number")
                        .HasMaxLength(50);

                    b.Property<string>("Class")
                        .HasMaxLength(50);

                    b.Property<string>("CommonName")
                        .HasColumnName("Common_name")
                        .HasMaxLength(200);

                    b.Property<string>("Con")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DEC")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("DreyerDesc")
                        .HasColumnName("Dreyer_desc")
                        .HasMaxLength(100);

                    b.Property<string>("Mag")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("NSTS")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasMaxLength(100);

                    b.Property<string>("OtherNames")
                        .HasColumnName("Other_names")
                        .HasMaxLength(50);

                    b.Property<string>("PA")
                        .HasMaxLength(50);

                    b.Property<string>("RA")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SB")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("SizeMax")
                        .HasColumnName("Size_max")
                        .HasMaxLength(50);

                    b.Property<string>("SizeMin")
                        .HasColumnName("Size_min")
                        .HasMaxLength(50);

                    b.Property<int>("TI");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("U2K");

                    b.HasKey("Id");

                    b.ToTable("SacDeepSkyObjects");
                });

            modelBuilder.Entity("ObsTool.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GoogleMapsAddress");

                    b.Property<float?>("Latitude");

                    b.Property<float?>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ObsTool.Entities.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CustomObjectName");

                    b.Property<int>("DsoId");

                    b.Property<int>("ObsSessionId");

                    b.Property<string>("Text")
                        .HasMaxLength(4000);

                    b.HasKey("Id");

                    b.HasIndex("DsoId");

                    b.HasIndex("ObsSessionId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("ObsTool.Entities.ObsResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(250);

                    b.Property<int>("ObservationId");

                    b.Property<string>("Type")
                        .HasMaxLength(20);

                    b.Property<string>("Url")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ObservationId");

                    b.ToTable("ObsResources");
                });

            modelBuilder.Entity("ObsTool.Entities.ObsSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Conditions")
                        .HasMaxLength(4000);

                    b.Property<DateTime?>("Date");

                    b.Property<decimal?>("LimitingMagnitude");

                    b.Property<int?>("LocationId");

                    b.Property<string>("ReportText");

                    b.Property<int?>("Seeing");

                    b.Property<string>("Summary")
                        .HasMaxLength(4000);

                    b.Property<string>("Title")
                        .HasMaxLength(500);

                    b.Property<int?>("Transparency");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("ObsSessions");
                });

            modelBuilder.Entity("ObsTool.Entities.ArticleConstellations", b =>
                {
                    b.HasOne("ObsTool.Entities.Article", "Article")
                        .WithMany("ArticleConstellations")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ObsTool.Entities.Constellation", "Constellation")
                        .WithMany("ReferringArticles")
                        .HasForeignKey("ConstellationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObsTool.Entities.ArticleDsoObjects", b =>
                {
                    b.HasOne("ObsTool.Entities.Article", "Article")
                        .WithMany("Objects")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ObsTool.Entities.Dso", "Dso")
                        .WithMany("ReferringArticles")
                        .HasForeignKey("DsoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObsTool.Entities.Observation", b =>
                {
                    b.HasOne("ObsTool.Entities.Dso", "Dso")
                        .WithMany()
                        .HasForeignKey("DsoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ObsTool.Entities.ObsSession")
                        .WithMany("Observations")
                        .HasForeignKey("ObsSessionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObsTool.Entities.ObsResource", b =>
                {
                    b.HasOne("ObsTool.Entities.Observation")
                        .WithMany("ObsResources")
                        .HasForeignKey("ObservationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ObsTool.Entities.ObsSession", b =>
                {
                    b.HasOne("ObsTool.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });
#pragma warning restore 612, 618
        }
    }
}
